#!/usr/bin/env bash

set -Eeo pipefail

NHS_SERVICE=mhs
AWS_REGION=eu-west-2
AWS_DEFAULT_REGION=$AWS_REGION

AWS_HELPERS_FILE="utils/aws-helpers"
AWS_HELPERS_VERSION="0.2.2"
mkdir -p utils
if [[ ! -f $AWS_HELPERS_FILE ]];then
  wget --quiet -O $AWS_HELPERS_FILE https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${AWS_HELPERS_VERSION}/aws-helpers
fi
chmod +x $AWS_HELPERS_FILE
source $AWS_HELPERS_FILE

CERTIFICATES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/mhs-certs"

if [ -z "${MHS_IMAGE_TAG}" ]; then
  MHS_IMAGE_TAG="${GO_DEPENDENCY_LABEL_MHS_DOCKER}"
fi

if [ -z "${DNS_IMAGE_TAG}" ]; then
  DNS_IMAGE_TAG="${GO_DEPENDENCY_LABEL_DOCKER_DNS_IMAGES:-alpha}"
fi

function tf_init {
  check_env
  #  Condition [ $NHS_ENVIRONMENT == "test" ] is required as test environment infrastructure is deployed in CI AWS account
  [ $NHS_ENVIRONMENT == "ci" ] || [ $NHS_ENVIRONMENT == "test" ] &&  bucket_env_infix=""  || bucket_env_infix="$NHS_ENVIRONMENT-"

  cd terraform

  terraform init -reconfigure \
    -backend-config key="${NHS_SERVICE}-${NHS_ENVIRONMENT}-${cluster_name}/terraform.tfstate" \
    -backend-config bucket="prm-deductions-${bucket_env_infix}terraform-state" \
    -backend-config dynamodb_table="prm-deductions-${bucket_env_infix}terraform-table" \
    -backend-config region=${AWS_DEFAULT_REGION}
}

function tf_plan {
  operation=$1
  cluster_name=$2

  check_mhs_docker_image_tag

  if [ -z "${DNS_IMAGE_TAG}" ]; then
    echo "DNS_IMAGE_TAG must be set"
    exit 3
  fi

  check_cluster_name $cluster_name

  tf_init
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var build_id=$MHS_IMAGE_TAG -var-file=${NHS_ENVIRONMENT}.tfvars -var-file=${NHS_ENVIRONMENT}_${cluster_name}.tfvars -out="${NHS_ENVIRONMENT}.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var build_id=$MHS_IMAGE_TAG -var-file=${NHS_ENVIRONMENT}.tfvars -var-file=${NHS_ENVIRONMENT}_${cluster_name}.tfvars -out="${NHS_ENVIRONMENT}.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  tf_init
  terraform get # modules
  terraform apply ${NHS_ENVIRONMENT}.tfplan
  terraform output -json > tf-out.json
}

function check_mhs_docker_image_tag {
  if [ -z "${MHS_IMAGE_TAG}" ]; then
    echo "MHS_IMAGE_TAG must be set"
    exit 3
  fi
}

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_cluster_name {
  cluster_name=$1
  if [[ $cluster_name != "repo" ]] && [[ $cluster_name != "test_harness" ]]; then
    echo "cluster_name must be set to either repo or test_harness"
    exit 3
  fi
}

function generate_csr {
  keys_file_name="$1"
  # If you intend to secure the URL https://www.yourdomain.com, then your CSRâ€™s common name must be www.yourdomain.com
  common_name="$2"
  fqdn=$common_name

  if [[ -z "$keys_file_name" ]]; then
    echo "Keys filename missing"
    exit 1
  fi
  if [[ -z "$common_name" ]]; then
    echo "domain name missing"
    exit 1
  fi

  echo "Preparing certificates for: ${keys_file_name} on ${fqdn}, common_name: ${common_name}"
  mkdir -p $CERTIFICATES_DIR

  # 1. Create a config file for generating a Certificate Signing Request (CSR).
  cat <<EOF >${CERTIFICATES_DIR}/csr.conf
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
CN = ${common_name}

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = ${fqdn}

[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names
EOF

  # 2. Create a private key (${keys_file_name}.key) and then generate a certificate request (${keys_file_name}.csr) from it.
  # https://www.openssl.org/docs/manmaster/man1/req.html
  openssl genrsa -out ${keys_file_name}.key 2048
  openssl req -new -key ${keys_file_name}.key -out ${keys_file_name}.csr -config ${CERTIFICATES_DIR}/csr.conf
}

function docker_login {
  echo Logging in to Amazon ECR...
  eval $(dojo "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function get_aws_value {
  secret_id=$1
  json=$(aws ssm get-parameter --region $AWS_DEFAULT_REGION --name $secret_id)
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain SSM value: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".Parameter.Value"
}

function configure_mhs_inbound_host_name {
  check_env
  if [[ $NHS_ENVIRONMENT == "dev" ]]; then
    export MHS_HOST_NAME=inbound-opentest.mhs.dev.non-prod.patient-deductions.nhs.uk
  else
    export MHS_HOST_NAME=inbound-b86041.mhs.test.non-prod.patient-deductions.nhs.uk
  fi
}

function check_mhs_inbound_connectivity() {
    if nc -w5 -z -v ${MHS_HOST_NAME} 443; then exit 0;
    else exit 1; fi
}

command="$1"
case "${command}" in
  _test)
      npm install
      npm run test
      ;;
  test)
      check_env
      export NODE_EXTRA_CA_CERTS=certs/deductions.crt
      dojo -c Dojofile-node "./tasks _test"
      ./tasks test_inbound
      ;;
  _test_inbound)
      check_mhs_inbound_connectivity
      ;;
  test_inbound)
      check_env
      configure_mhs_inbound_host_name
      dojo "./tasks _test_inbound"
      ;;
  tf)
      check_env
      dojo "bash"
      ;;
  _tf_plan_repo)
      check_env
      _assume_environment_role $NHS_ENVIRONMENT
      tf_plan "$2" repo
      ;;
  _tf_plan_test_harness)
      check_env
      _assume_environment_role $NHS_ENVIRONMENT
      tf_plan "$2" test_harness
      ;;
  tf_plan_repo)
      check_env
      dojo "./tasks _tf_plan_repo $2 repo"
      ;;
  tf_plan_test_harness)
      check_env
      dojo "./tasks _tf_plan_test_harness $2 test_harness"
      ;;
  _tf_apply)
      check_env
      _assume_environment_role $NHS_ENVIRONMENT
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo "./tasks _tf_apply"
      ;;
  _csr)
      check_env
      if [ -z $ODS_CODE ]; then
        echo "Please specify ODS_CODE"
        exit 4
      fi
      fqdn="in-$ODS_CODE.mhs.$NHS_ENVIRONMENT.non-prod.patient-deductions.nhs.uk"
      generate_csr "in-$ODS_CODE-mhs-$NHS_ENVIRONMENT" $fqdn
      echo "The CSR has to be sent together with endpoint registration. Use the form below or ask endpoint admin to register it"
      echo "https://digital.nhs.uk/forms/combined-endpoint-and-service-registration-request"
      ;;
  promote_docker_image)
      check_env
      promote_docker_image "mhs-inbound:$MHS_IMAGE_TAG" "$NHS_ENVIRONMENT"
      promote_docker_image "mhs-outbound:$MHS_IMAGE_TAG" "$NHS_ENVIRONMENT"
      promote_docker_image "mhs-route:$MHS_IMAGE_TAG" "$NHS_ENVIRONMENT"
      ;;
  _wait_ecs)
      _assume_environment_role $NHS_ENVIRONMENT
      cluster_name=$2
      check_cluster_name $cluster_name

      CLUSTER_NAME=$cluster_name
      if [[ $cluster_name == "test_harness" ]]; then
        CLUSTER_NAME=test-harness
      fi

      # Wait for route
      aws ecs wait services-stable \
        --region $AWS_DEFAULT_REGION \
        --cluster $NHS_ENVIRONMENT-$CLUSTER_NAME-mhs-route-cluster \
        --service $NHS_ENVIRONMENT-$CLUSTER_NAME-mhs-route

      # Wait for outbound
      aws ecs wait services-stable \
        --region $AWS_DEFAULT_REGION \
        --cluster $NHS_ENVIRONMENT-$CLUSTER_NAME-mhs-outbound-cluster \
        --service $NHS_ENVIRONMENT-$CLUSTER_NAME-mhs-outbound

      # Wait for inbound
      aws ecs wait services-stable \
        --region $AWS_DEFAULT_REGION \
        --cluster $NHS_ENVIRONMENT-$CLUSTER_NAME-mhs-inbound-cluster \
        --service $NHS_ENVIRONMENT-$CLUSTER_NAME-mhs-inbound
      ;;

  wait_ecs)
      cluster_name=$2
      check_cluster_name $cluster_name
      check_env
      dojo "./tasks _wait_ecs $cluster_name"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
